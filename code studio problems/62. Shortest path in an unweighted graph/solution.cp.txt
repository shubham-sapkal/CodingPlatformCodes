#include<unordered_map>
#include<list>

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	// crate adj list
    unordered_map<int, list<int>> adjList;
    for(int i=0; i<edges.size(); i++)
    {
        int u = edges[i].first;
        int v = edges[i].second;
        
        // undirected graph
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
    
    // applying BFS
    unordered_map<int, bool> visited;
    unordered_map<int, int> parent;
    
    queue<int> q;
    q.push(s);
    visited[s] = true;
    parent[s] = -1;
    
    while(!q.empty())
    {
        int frontnode = q.front();
        q.pop();
        
        for(auto i: adjList[frontnode])
        {
            if(!visited[i])
            {
                visited[i] = true;
                parent[i] = frontnode;
                q.push(i);
            }
        }
    }
    
    // prepare shortest part
    vector<int> ans;
    int currnode = t;
    ans.push_back(currnode);
    
    while(currnode != s)
    {
        currnode = parent[currnode];
        ans.push_back(currnode);
    }
    
    reverse(ans.begin(), ans.end());
    
    return ans;
    
    
    
    
}
